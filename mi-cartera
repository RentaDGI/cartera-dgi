<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Mi Cartera DGI - RentaDGI</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    * { font-family: 'Inter', sans-serif; }
    .cartera-dgi-container { max-width: 1400px; margin: 0 auto; padding: 20px; }
    .gradient-bg-cartera { background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 50%, #3b82f6 100%); color: white; padding: 3rem 2rem; border-radius: 16px; margin-bottom: 2rem; text-align: center; }
    .gradient-bg-cartera h1 { font-size: 2.5rem; font-weight: 800; margin-bottom: 1rem; }
    .gradient-bg-cartera p { font-size: 1.25rem; color: rgba(255, 255, 255, 0.9); }
    .stats-grid-cartera { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1.5rem; margin-bottom: 2rem; }
    .stat-card-cartera { background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-left: 4px solid #3b82f6; border-radius: 12px; padding: 1.5rem; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); transition: transform 0.3s ease; }
    .stat-card-cartera:hover { transform: translateY(-5px); box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15); }
    .stat-icon { background: #dbeafe; border-radius: 50%; padding: 1rem; display: inline-flex; margin-bottom: 1rem; }
    .stat-icon i { font-size: 1.5rem; color: #1e40af; }
    .stat-label { color: #64748b; font-size: 0.875rem; font-weight: 600; text-transform: uppercase; letter-spacing: 0.05em; }
    .stat-value { font-size: 2.5rem; font-weight: 700; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; margin-top: 0.5rem; }
    .table-card-cartera { background: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); overflow-x: auto; }
    .table-cartera { width: 100%; border-collapse: separate; border-spacing: 0; }
    .table-cartera thead th { background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 50%, #3b82f6 100%); color: white; font-weight: 600; text-align: left; padding: 1rem 0.75rem; font-size: 0.875rem; text-transform: uppercase; letter-spacing: 0.05em; border: none; user-select: none; position: relative; }
    .table-cartera thead th:first-child { border-top-left-radius: 12px; }
    .table-cartera thead th:last-child { border-top-right-radius: 12px; }
    .table-cartera tbody tr { transition: background-color 0.2s; border-bottom: 1px solid #e5e7eb; }
    .table-cartera tbody tr:hover { background-color: #f8fafc; }
    .table-cartera tbody tr:last-child { border-bottom: none; }
    .table-cartera td { padding: 1rem 0.75rem; font-size: 0.95rem; }
    .ticker-badge { font-weight: 700; color: #1e40af; font-size: 1.125rem; text-transform: uppercase; }
    .sector-badge { display: inline-block; padding: 0.375rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 600; color: white; }
    .yield-badge { display: inline-block; padding: 0.375rem 0.75rem; border-radius: 6px; font-weight: 700; font-size: 0.875rem; color: white; }
    .loading-cartera { text-align: center; padding: 3rem; }
    .spinner-cartera { display: inline-block; width: 3rem; height: 3rem; border: 4px solid #e5e7eb; border-top-color: #1e40af; border-radius: 50%; animation: spin-cartera 1s linear infinite; }
    @keyframes spin-cartera { to { transform: rotate(360deg); } }
    .error-cartera { background: #fee2e2; border-left: 4px solid #ef4444; padding: 1.5rem; border-radius: 8px; margin: 2rem 0; }
    .error-cartera h3 { color: #991b1b; font-weight: 600; margin-bottom: 0.5rem; }
    .error-cartera p { color: #dc2626; font-size: 0.875rem; }
    
    /* Colores por sector */
    .sector-financials { background: linear-gradient(135deg, #3b82f6, #60a5fa); }
    .sector-health-care { background: linear-gradient(135deg, #10b981, #34d399); }
    .sector-consumer-staples { background: linear-gradient(135deg, #f59e0b, #fbbf24); }
    .sector-utilities { background: linear-gradient(135deg, #8b5cf6, #a78bfa); }
    .sector-industrials { background: linear-gradient(135deg, #ec4899, #f472b6); }
    .sector-real-estate { background: linear-gradient(135deg, #06b6d4, #0ea5e9); }
    .sector-technology { background: linear-gradient(135deg, #ef4444, #f97316); }
    .sector-communication-services { background: linear-gradient(135deg, #14b8a6, #0d9488); }
    .sector-energy { background: linear-gradient(135deg, #78716c, #a8a29e); }
    .sector-materials { background: linear-gradient(135deg, #65a30d, #84cc16); }
    .sector-etf { background: linear-gradient(135deg, #4c1d95, #7c3aed); }
    .sector-other { background: linear-gradient(135deg, #64748b, #94a3b8); }
    
    /* Colores por yield */
    .yield-alto { background: linear-gradient(135deg, #10b981, #34d399); } /* > 4% */
    .yield-medio { background: linear-gradient(135deg, #f59e0b, #fbbf24); } /* 2-4% */
    .yield-bajo { background: linear-gradient(135deg, #ef4444, #f97316); } /* < 2% */
    
    .filter-buttons { display: flex; gap: 12px; flex-wrap: wrap; margin-bottom: 20px; }
    .filter-btn { padding: 10px 20px; border-radius: 25px; border: 2px solid #e5e7eb; background: white; color: #64748b; font-weight: 600; cursor: pointer; transition: all 0.3s; }
    .filter-btn:hover { border-color: #667eea; color: #667eea; }
    .filter-btn.active { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-color: transparent; }
    
    /* Filtros de sector con colores */
    .filter-btn[data-filter="sector-financials"] { border-color: #3b82f6; }
    .filter-btn[data-filter="sector-financials"]:hover { background: linear-gradient(135deg, #3b82f6, #60a5fa); color: white; border-color: #3b82f6; }
    .filter-btn[data-filter="sector-financials"].active { background: linear-gradient(135deg, #3b82f6, #60a5fa); color: white; border-color: #3b82f6; }
    
    .filter-btn[data-filter="sector-health-care"] { border-color: #10b981; }
    .filter-btn[data-filter="sector-health-care"]:hover { background: linear-gradient(135deg, #10b981, #34d399); color: white; border-color: #10b981; }
    .filter-btn[data-filter="sector-health-care"].active { background: linear-gradient(135deg, #10b981, #34d399); color: white; border-color: #10b981; }
    
    .filter-btn[data-filter="sector-consumer-staples"] { border-color: #f59e0b; }
    .filter-btn[data-filter="sector-consumer-staples"]:hover { background: linear-gradient(135deg, #f59e0b, #fbbf24); color: white; border-color: #f59e0b; }
    .filter-btn[data-filter="sector-consumer-staples"].active { background: linear-gradient(135deg, #f59e0b, #fbbf24); color: white; border-color: #f59e0b; }
    
    .filter-btn[data-filter="sector-utilities"] { border-color: #8b5cf6; }
    .filter-btn[data-filter="sector-utilities"]:hover { background: linear-gradient(135deg, #8b5cf6, #a78bfa); color: white; border-color: #8b5cf6; }
    .filter-btn[data-filter="sector-utilities"].active { background: linear-gradient(135deg, #8b5cf6, #a78bfa); color: white; border-color: #8b5cf6; }
    
    .filter-btn[data-filter="sector-industrials"] { border-color: #ec4899; }
    .filter-btn[data-filter="sector-industrials"]:hover { background: linear-gradient(135deg, #ec4899, #f472b6); color: white; border-color: #ec4899; }
    .filter-btn[data-filter="sector-industrials"].active { background: linear-gradient(135deg, #ec4899, #f472b6); color: white; border-color: #ec4899; }
    
    .filter-btn[data-filter="sector-real-estate"] { border-color: #06b6d4; }
    .filter-btn[data-filter="sector-real-estate"]:hover { background: linear-gradient(135deg, #06b6d4, #0ea5e9); color: white; border-color: #06b6d4; }
    .filter-btn[data-filter="sector-real-estate"].active { background: linear-gradient(135deg, #06b6d4, #0ea5e9); color: white; border-color: #06b6d4; }
    
    .filter-btn[data-filter="sector-technology"] { border-color: #ef4444; }
    .filter-btn[data-filter="sector-technology"]:hover { background: linear-gradient(135deg, #ef4444, #f97316); color: white; border-color: #ef4444; }
    .filter-btn[data-filter="sector-technology"].active { background: linear-gradient(135deg, #ef4444, #f97316); color: white; border-color: #ef4444; }
    
    .filter-btn[data-filter="sector-communication-services"] { border-color: #14b8a6; }
    .filter-btn[data-filter="sector-communication-services"]:hover { background: linear-gradient(135deg, #14b8a6, #0d9488); color: white; border-color: #14b8a6; }
    .filter-btn[data-filter="sector-communication-services"].active { background: linear-gradient(135deg, #14b8a6, #0d9488); color: white; border-color: #14b8a6; }
    
    .filter-btn[data-filter="sector-energy"] { border-color: #78716c; }
    .filter-btn[data-filter="sector-energy"]:hover { background: linear-gradient(135deg, #78716c, #a8a29e); color: white; border-color: #78716c; }
    .filter-btn[data-filter="sector-energy"].active { background: linear-gradient(135deg, #78716c, #a8a29e); color: white; border-color: #78716c; }
    
    .filter-btn[data-filter="sector-materials"] { border-color: #65a30d; }
    .filter-btn[data-filter="sector-materials"]:hover { background: linear-gradient(135deg, #65a30d, #84cc16); color: white; border-color: #65a30d; }
    .filter-btn[data-filter="sector-materials"].active { background: linear-gradient(135deg, #65a30d, #84cc16); color: white; border-color: #65a30d; }
    
    .filter-btn[data-filter="sector-etf"] { border-color: #4c1d95; }
    .filter-btn[data-filter="sector-etf"]:hover { background: linear-gradient(135deg, #4c1d95, #7c3aed); color: white; border-color: #4c1d95; }
    .filter-btn[data-filter="sector-etf"].active { background: linear-gradient(135deg, #4c1d95, #7c3aed); color: white; border-color: #4c1d95; }
    
    /* Filtros de yield con colores */
    .filter-btn[data-filter="yield-alto"] { border-color: #10b981; }
    .filter-btn[data-filter="yield-alto"]:hover { background: linear-gradient(135deg, #10b981, #34d399); color: white; border-color: #10b981; }
    .filter-btn[data-filter="yield-alto"].active { background: linear-gradient(135deg, #10b981, #34d399); color: white; border-color: #10b981; }
    
    .filter-btn[data-filter="yield-medio"] { border-color: #f59e0b; }
    .filter-btn[data-filter="yield-medio"]:hover { background: linear-gradient(135deg, #f59e0b, #fbbf24); color: white; border-color: #f59e0b; }
    .filter-btn[data-filter="yield-medio"].active { background: linear-gradient(135deg, #f59e0b, #fbbf24); color: white; border-color: #f59e0b; }
    
    .filter-btn[data-filter="yield-bajo"] { border-color: #ef4444; }
    .filter-btn[data-filter="yield-bajo"]:hover { background: linear-gradient(135deg, #ef4444, #f97316); color: white; border-color: #ef4444; }
    .filter-btn[data-filter="yield-bajo"].active { background: linear-gradient(135deg, #ef4444, #f97316); color: white; border-color: #ef4444; }
    
    .sortable { cursor: pointer; user-select: none; position: relative; }
    .sortable:hover { background: linear-gradient(135deg, #1e40af 0%, #2563eb 50%, #3b82f6 100%); }
    .sortable::after { content: '⇅'; position: absolute; right: 8px; opacity: 0.3; font-size: 0.875rem; }
    .sortable.sort-asc::after { content: '↑'; opacity: 1; color: #10b981; }
    .sortable.sort-desc::after { content: '↓'; opacity: 1; color: #ef4444; }
    
    @media (max-width: 768px) {
      .gradient-bg-cartera h1 { font-size: 1.875rem; }
      .table-cartera { font-size: 0.75rem; }
      .table-cartera td, .table-cartera th { padding: 0.5rem 0.375rem; }
    }
    
    /* Estilos para filas alternas */
    .table-cartera tbody tr:nth-child(even) {
      background-color: #f9fafb;
    }
    
    /* Hover más suave */
    .table-cartera tbody tr:hover {
      background-color: #f1f5f9 !important;
    }
  </style>
</head>
<body class="bg-gray-50">
  <div class="cartera-dgi-container">
    <!-- Header -->
    <div class="gradient-bg-cartera">
      <h1><i class="fas fa-wallet"></i> Mi Cartera DGI</h1>
      <p>Seguimiento en tiempo real de mi cartera de dividendos crecientes</p>
      <p style="font-size: 0.875rem; margin-top: 0.5rem; color: rgba(255, 255, 255, 0.8);">
        <i class="fas fa-sync-alt"></i> Datos actualizados automáticamente desde Google Sheets
      </p>
    </div>

    <!-- Stats Cards -->
    <div id="stats-container-cartera" class="stats-grid-cartera"></div>

    <!-- Loading State -->
    <div id="loading-cartera" class="loading-cartera">
      <div class="spinner-cartera"></div>
      <p style="margin-top: 1rem; color: #6b7280;">Cargando datos...</p>
    </div>

    <!-- Error State -->
    <div id="error-cartera" class="error-cartera hidden">
      <h3><i class="fas fa-exclamation-triangle"></i> Error al cargar los datos</h3>
      <p>Por favor, verifica que la hoja de cálculo sea pública y accesible.</p>
      <div id="error-detail" class="mt-2 text-xs text-red-700"></div>
    </div>

    <!-- Filters -->
    <div class="main-table-card">
      <div class="filter-buttons">
        <button class="filter-btn active" data-filter="all">
          <i class="fas fa-list"></i> Todas
        </button>
        <button class="filter-btn" data-filter="sector-financials">
          <i class="fas fa-piggy-bank"></i> Financials
        </button>
        <button class="filter-btn" data-filter="sector-health-care">
          <i class="fas fa-heartbeat"></i> Health Care
        </button>
        <button class="filter-btn" data-filter="sector-consumer-staples">
          <i class="fas fa-utensils"></i> Consumer Staples
        </button>
        <button class="filter-btn" data-filter="sector-utilities">
          <i class="fas fa-bolt"></i> Utilities
        </button>
        <button class="filter-btn" data-filter="sector-industrials">
          <i class="fas fa-industry"></i> Industrials
        </button>
        <button class="filter-btn" data-filter="sector-real-estate">
          <i class="fas fa-building"></i> Real Estate
        </button>
        <button class="filter-btn" data-filter="sector-technology">
          <i class="fas fa-microchip"></i> Technology
        </button>
        <button class="filter-btn" data-filter="sector-communication-services">
          <i class="fas fa-signal"></i> Communication
        </button>
        <button class="filter-btn" data-filter="sector-energy">
          <i class="fas fa-gas-pump"></i> Energy
        </button>
        <button class="filter-btn" data-filter="sector-materials">
          <i class="fas fa-cube"></i> Materials
        </button>
        <button class="filter-btn" data-filter="sector-etf">
          <i class="fas fa-chart-line"></i> ETF
        </button>
        <button class="filter-btn" data-filter="yield-alto">
          <i class="fas fa-percentage"></i> Yield ≥ 4%
        </button>
        <button class="filter-btn" data-filter="yield-medio">
          <i class="fas fa-percentage"></i> Yield 2-4%
        </button>
        <button class="filter-btn" data-filter="yield-bajo">
          <i class="fas fa-percentage"></i> Yield < 2%
        </button>
      </div>
    </div>

    <!-- Table Container -->
    <div id="table-container-cartera" class="table-card-cartera hidden">
      <table class="table-cartera">
        <thead>
          <tr>
            <th style="width: 50px;" class="sortable" data-sort="index">#</th>
            <th class="sortable" data-sort="ticker"><i class="fas fa-tag"></i> Ticker</th>
            <th class="sortable" data-sort="empresa"><i class="fas fa-building"></i> Empresa</th>
            <th class="sortable" data-sort="sector"><i class="fas fa-industry"></i> Sector</th>
            <th style="text-align: center;" class="sortable" data-sort="porcentaje"><i class="fas fa-percentage"></i> % Cartera</th>
            <th style="text-align: right;"><i class="fas fa-euro-sign"></i> Precio</th>
            <th style="text-align: center;" class="sortable" data-sort="yield"><i class="fas fa-chart-line"></i> Yield %</th>
            <th style="text-align: right;"><i class="fas fa-coins"></i> Nº Acciones</th>
            <th style="text-align: right;" class="sortable" data-sort="dividendo"><i class="fas fa-hand-holding-usd"></i> Dividendo Anual €</th>
            <th style="text-align: right;"><i class="fas fa-wallet"></i> Valor €</th>
          </tr>
        </thead>
        <tbody id="portfolio-body-cartera"></tbody>
      </table>
    </div>
  </div>

  <script>
    (function() {
      'use strict';

      // Estado UI
      const $ = (sel) => document.querySelector(sel);
      const setHidden = (id, hidden) => { const el = document.getElementById(id); if (!el) return; el.classList.toggle('hidden', hidden); };
      const setStatus = (msg) => { const el = document.getElementById('status-text'); if (el) el.textContent = msg || ''; };

      // Números y formato
      function cleanNum(v) {
        if (v == null || v === "") return null;
        let s = (typeof v === "number") ? String(v) : String(v).trim();
        s = s.replace(/[£$€%]/g, "").replace(/\s+/g, "");
        const hasDot = s.indexOf(".") !== -1;
        const hasComma = s.indexOf(",") !== -1;
        if (hasDot && hasComma) {
          const lastDot = s.lastIndexOf(".");
          const lastComma = s.lastIndexOf(",");
          const decIsComma = lastComma > lastDot;
          const decimalSep = decIsComma ? "," : ".";
          const thousandSep = decIsComma ? "." : ",";
          s = s.split(thousandSep).join("");
          s = s.replace(decimalSep, ".");
        } else if (hasComma && !hasDot) {
          s = s.replace(",", ".");
        }
        const n = parseFloat(s);
        return isNaN(n) ? null : n;
      }
      
      function fmt(n, decimals, unit) {
        if (n == null || isNaN(n)) return "—";
        const formatted = n.toLocaleString("es-ES", { minimumFractionDigits: decimals, maximumFractionDigits: decimals });
        return unit ? formatted + " " + unit : formatted;
      }

      function clearTable() {
        const tbody = document.getElementById('portfolio-body-cartera');
        if (tbody) tbody.innerHTML = '';
      }

      let currentData = [];

      function renderRows(portfolioData) {
        const tbody = document.getElementById('portfolio-body-cartera');
        if (!tbody) return;
        
        tbody.innerHTML = '';
        portfolioData.forEach((r, idx) => {
          const tr = document.createElement('tr');
          tr.setAttribute('data-sector', r.sector ? r.sector.toLowerCase().replace(/\s+/g, '-') : '');
          tr.setAttribute('data-porcentaje', r.porcentajeCarteraNum != null ? (r.porcentajeCarteraNum * 100) : 0);
          tr.setAttribute('data-valor', r.valorEuros != null ? r.valorEuros : 0);
          tr.setAttribute('data-dividendo', r.dividendoAnualEuros != null ? r.dividendoAnualEuros : 0);
          tr.setAttribute('data-yield', r.yieldActual != null ? r.yieldActual : 0);
          
          // # (índice)
          const tdIndex = document.createElement('td');
          tdIndex.style.textAlign = 'center';
          tdIndex.style.fontWeight = '600';
          tdIndex.style.color = '#9ca3af';
          tdIndex.textContent = idx + 1;
          tr.appendChild(tdIndex);
          
          // Ticker (en mayúsculas)
          const tdTicker = document.createElement('td');
          const spanTicker = document.createElement('span');
          spanTicker.className = 'ticker-badge';
          spanTicker.textContent = r.ticker ? r.ticker.toUpperCase() : '';
          tdTicker.appendChild(spanTicker);
          tr.appendChild(tdTicker);
          
          // Empresa (modificada para British American Tobacco)
          const tdEmpresa = document.createElement('td');
          const divEmpresa = document.createElement('div');
          divEmpresa.style.fontWeight = '600';
          divEmpresa.style.color = '#1f2937';
          let empresaNombre = r.empresa || '';
          if (empresaNombre.toLowerCase().includes('british american tobacco')) {
            empresaNombre = 'British American Tobacco';
          }
          divEmpresa.textContent = empresaNombre;
          tdEmpresa.appendChild(divEmpresa);
          tr.appendChild(tdEmpresa);
          
          // Sector con color
          const tdSector = document.createElement('td');
          const spanSector = document.createElement('span');
          spanSector.className = 'sector-badge';
          
          // Asignar clase de color según el sector
          const sectorLower = (r.sector || '').toLowerCase();
          if (sectorLower.includes('financials')) {
            spanSector.classList.add('sector-financials');
          } else if (sectorLower.includes('health') || sectorLower.includes('salud')) {
            spanSector.classList.add('sector-health-care');
          } else if (sectorLower.includes('consumer') && sectorLower.includes('staples')) {
            spanSector.classList.add('sector-consumer-staples');
          } else if (sectorLower.includes('utilities') || sectorLower.includes('servicios')) {
            spanSector.classList.add('sector-utilities');
          } else if (sectorLower.includes('industrials') || sectorLower.includes('industrial')) {
            spanSector.classList.add('sector-industrials');
          } else if (sectorLower.includes('real estate') || sectorLower.includes('inmobiliario')) {
            spanSector.classList.add('sector-real-estate');
          } else if (sectorLower.includes('technology') || sectorLower.includes('tecnología')) {
            spanSector.classList.add('sector-technology');
          } else if (sectorLower.includes('communication') || sectorLower.includes('telecom')) {
            spanSector.classList.add('sector-communication-services');
          } else if (sectorLower.includes('energy') || sectorLower.includes('energía')) {
            spanSector.classList.add('sector-energy');
          } else if (sectorLower.includes('materials') || sectorLower.includes('materiales')) {
            spanSector.classList.add('sector-materials');
          } else if (sectorLower.includes('etf')) {
            spanSector.classList.add('sector-etf');
          } else {
            spanSector.classList.add('sector-other');
          }
          
          spanSector.textContent = r.sector || '';
          tdSector.appendChild(spanSector);
          tr.appendChild(tdSector);
          
          // % Cartera (multiplicado por 100 y formateado con 2 decimales)
          const tdPct = document.createElement('td');
          tdPct.style.textAlign = 'center';
          tdPct.style.fontWeight = '600';
          if (r.porcentajeCarteraNum != null) {
            tdPct.textContent = fmt(r.porcentajeCarteraNum * 100, 2, '%');
          } else {
            tdPct.textContent = '—';
          }
          tr.appendChild(tdPct);
          
          // Precio
          const tdPrecio = document.createElement('td');
          tdPrecio.style.textAlign = 'right';
          tdPrecio.style.fontWeight = '600';
          if (r.precio != null) {
            tdPrecio.textContent = fmt(r.precio, 2, '€');
          } else {
            tdPrecio.textContent = "—";
          }
          tr.appendChild(tdPrecio);
          
          // Yield Actual (%) con color según valor
          const tdYield = document.createElement('td');
          tdYield.style.textAlign = 'center';
          tdYield.style.fontWeight = '600';
          if (r.yieldActual != null) {
            const yb = document.createElement('span');
            yb.className = 'yield-badge';
            
            // Asignar clase de color según el yield
            if (r.yieldActual >= 4) {
              yb.classList.add('yield-alto');
            } else if (r.yieldActual >= 2) {
              yb.classList.add('yield-medio');
            } else {
              yb.classList.add('yield-bajo');
            }
            
            yb.textContent = fmt(r.yieldActual, 2, '%');
            tdYield.appendChild(yb);
          } else {
            tdYield.textContent = '—';
          }
          tr.appendChild(tdYield);
          
          // Nº Acciones
          const tdNum = document.createElement('td');
          tdNum.style.textAlign = 'right';
          tdNum.style.fontWeight = '500';
          tdNum.textContent = r.numAcciones != null ? fmt(r.numAcciones, 0) : '—';
          tr.appendChild(tdNum);
          
          // Dividendo Anual €
          const tdDiv = document.createElement('td');
          tdDiv.style.textAlign = 'right';
          tdDiv.style.fontWeight = '600';
          if (r.dividendoAnualEuros != null) {
            tdDiv.textContent = fmt(r.dividendoAnualEuros, 2, '€');
          } else {
            tdDiv.textContent = "—";
          }
          tr.appendChild(tdDiv);
          
          // Valor €
          const tdVal = document.createElement('td');
          tdVal.style.textAlign = 'right';
          const spanVal = document.createElement('span');
          spanVal.style.fontWeight = '700';
          spanVal.style.color = '#1e40af';
          spanVal.style.fontSize = '1.125rem';
          spanVal.textContent = r.valorEuros != null ? fmt(r.valorEuros, 2, '€') : '—';
          tdVal.appendChild(spanVal);
          tr.appendChild(tdVal);
          
          tbody.appendChild(tr);
        });
        
        // Setup filters and sorting after rendering
        setupFilters();
        setupSorting();
      }

      function displayStats(data) {
        const statsContainer = document.getElementById('stats-container-cartera');
        if (!statsContainer) return;
        if (!data || data.length === 0) {
          statsContainer.innerHTML = '';
          return;
        }
        
        let totalStocks = data.length;
        let totalValue = 0;
        let totalDividend = 0;
        
        data.forEach(item => {
          totalValue += (typeof item.valorEuros === 'number' ? item.valorEuros : 0);
          totalDividend += (typeof item.dividendoAnualEuros === 'number' ? item.dividendoAnualEuros : 0);
        });
        
        // Calcular yield de cartera
        let portfolioYield = 0;
        if (totalValue > 0) {
          portfolioYield = (totalDividend / totalValue) * 100;
        }
        
        statsContainer.innerHTML =
          '<div class="stat-card-cartera">' +
            '<div class="stat-icon"><i class="fas fa-building"></i></div>' +
            '<div class="stat-label">Total Empresas</div>' +
            '<div class="stat-value">' + totalStocks + '</div>' +
            '<p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.5rem;">Posiciones en cartera</p>' +
          '</div>' +
          '<div class="stat-card-cartera">' +
            '<div class="stat-icon"><i class="fas fa-wallet"></i></div>' +
            '<div class="stat-label">Valor Total</div>' +
            '<div class="stat-value">' + fmt(totalValue, 0, '€') + '</div>' +
            '<p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.5rem;">Valor de mercado</p>' +
          '</div>' +
          '<div class="stat-card-cartera">' +
            '<div class="stat-icon" style="background: #d1fae5;"><i class="fas fa-hand-holding-usd" style="color: #059669;"></i></div>' +
            '<div class="stat-label">Dividendo Anual Total</div>' +
            '<div class="stat-value" style="color: #059669;">' + fmt(totalDividend, 2, '€') + '</div>' +
            '<p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.5rem;">Ingreso anual estimado</p>' +
          '</div>' +
          '<div class="stat-card-cartera">' +
            '<div class="stat-icon" style="background: #dbeafe;"><i class="fas fa-percentage" style="color: #1e40af;"></i></div>' +
            '<div class="stat-label">Yield Cartera</div>' +
            '<div class="stat-value" style="color: #1e40af;">' + fmt(portfolioYield, 2, '%') + '</div>' +
            '<p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.5rem;">Rentabilidad media</p>' +
          '</div>';
      }

      function buildSheetUrl(isPublished, sheetId, gid, callbackName) {
        const base = isPublished ? 
          'https://docs.google.com/spreadsheets/d/e/' : 
          'https://docs.google.com/spreadsheets/d/';
        return base + encodeURIComponent(sheetId) + '/gviz/tq?gid=' + encodeURIComponent(gid) + '&headers=1&tqx=responseHandler:' + encodeURIComponent(callbackName);
      }

      function showError(msg, details) {
        setHidden('loading-cartera', true);
        setHidden('table-container-cartera', true);
        const errDiv = document.getElementById('error-cartera');
        const errDetail = document.getElementById('error-detail');
        errDiv.classList.remove('hidden');
        errDiv.querySelector('p').textContent = msg || 'Se produjo un error.';
        errDetail.textContent = details || '';
        console.error('Mostrar error:', msg, details);
      }

      function cleanupOldScripts() {
        const scripts = document.querySelectorAll('script[data-gsloader]');
        scripts.forEach(s => {
          if (s && s.parentNode) {
            s.parentNode.removeChild(s);
          }
        });
      }

      function parseResponseToData(response) {
        if (!response || response.status !== 'ok' || !response.table || !Array.isArray(response.table.rows)) {
          const errTxt = response && response.errors ? JSON.stringify(response.errors) : 'Respuesta inválida o sin permisos';
          throw new Error(errTxt);
        }
        
        const rows = response.table.rows;
        const portfolioData = [];
        
        rows.forEach((rowObj, idx) => {
          const row = rowObj.c || [];
          if (row.length < 3) return; // requiere mínimo ticker, empresa, sector
          
          const ticker = row[0] && row[0].v != null ? String(row[0].v).trim() : '';
          if (!ticker || ticker.toLowerCase() === 'ticker') return;
          
          const empresa = row[1] && row[1].v != null ? String(row[1].v).trim() : '';
          const sector = row[2] && row[2].v != null ? String(row[2].v).trim() : '';
          // Asumimos que el porcentaje de cartera viene como decimal (0.0227) y lo almacenamos como número
          const porcentajeCarteraNum = row[3] ? cleanNum(row[3].v) : null;
          const precio = row[4] ? cleanNum(row[4].v) : null;
          const numAcciones = row[5] ? cleanNum(row[5].v) : null;
          const valorEuros = row[6] ? cleanNum(row[6].v) : null;
          // Columna H (índice 7) - Dividendo Anual en Euros
          const dividendoAnualEuros = row[7] ? cleanNum(row[7].v) : null;
          // Columna I (índice 8) - DPA (Dividendo Por Acción) en Euros
          const dpaEuros = row[8] ? cleanNum(row[8].v) : null;
          
          // Calcular Yield Actual: (DPA / Precio) * 100
          let yieldActual = null;
          if (dpaEuros != null && precio != null && precio !== 0) {
            yieldActual = (dpaEuros / precio) * 100;
          }
          
          // Corrección para tickers UK que empiezan por LON:
          if (ticker && ticker.startsWith('LON:') && yieldActual != null) {
            yieldActual = yieldActual * 100;
          }
          
          portfolioData.push({
            ticker,
            empresa,
            sector,
            porcentajeCarteraNum, // Número decimal (0.0227)
            precio,
            numAcciones,
            valorEuros,
            dividendoAnualEuros, // Nuevo campo
            dpaEuros, // Campo DPA
            yieldActual // Campo calculado
          });
        });
        
        if (portfolioData.length === 0) {
          throw new Error('No se encontraron filas válidas en la hoja (revisa encabezados y permisos).');
        }
        
        return portfolioData;
      }

      function loadPortfolioData({ isPublished, sheetId, gid, timeoutMs = 15000 }) {
        try {
          cleanupOldScripts();
          clearTable();
          displayStats([]);
          setHidden('error-cartera', true);
          setHidden('table-container-cartera', true);
          setHidden('loading-cartera', false);

          if (!sheetId) {
            showError('Falta el ID de la hoja', 'Introduce un ID válido en el panel de configuración.');
            return;
          }

          const callbackName = 'PortfolioCartera_' + Date.now() + '_' + Math.random().toString(36).slice(2);
          const sheetUrl = buildSheetUrl(isPublished, sheetId, gid || '0', callbackName);
          console.log('Cargando desde:', sheetUrl);

          let finished = false;
          const onFinish = () => {
            finished = true;
            try { delete window[callbackName]; } catch(_) {}
          };

          const to = setTimeout(() => {
            if (finished) return;
            onFinish();
            showError('Tiempo de espera agotado al conectar con Google Sheets', 'Posibles causas: ID incorrecto, la hoja no es pública o el tipo (Publicada/Normal) no coincide.');
          }, timeoutMs);

          window[callbackName] = function(response) {
            try {
              console.log('Respuesta recibida');
              clearTimeout(to);
              const data = parseResponseToData(response);
              currentData = data;
              renderRows(data);
              displayStats(data);
              setHidden('loading-cartera', true);
              setHidden('table-container-cartera', false);
            } catch(e) {
              clearTimeout(to);
              console.error('Error procesando datos:', e);
              showError('Error al procesar los datos', e.message || String(e));
            } finally {
              onFinish();
            }
          };

          const script = document.createElement('script');
          script.src = sheetUrl;
          script.async = true;
          script.setAttribute('data-gsloader', '1');
          script.onerror = function() {
            clearTimeout(to);
            onFinish();
            console.error('Fallo de red o permisos al cargar el script JSONP');
            showError('Error al conectar con Google Sheets', 'Verifica que la hoja sea pública y el ID sea correcto.');
          };
          document.body.appendChild(script);
        } catch(e) {
          console.error('Error inesperado:', e);
          showError('Error inesperado', e.message || String(e));
        }
      }

      // Helpers: extraer ID y GID desde una URL pegada
      function parseSheetInput(raw) {
        const out = { type: null, id: '', gid: '' };
        if (!raw) return out;
        try {
          // Detectar URL publicada /d/e/2PACX-.../...
          const pub = raw.match(/\/spreadsheets\/d\/e\/([^/]+)/);
          if (pub) { 
            out.type = 'published'; 
            out.id = pub[1]; 
          }
          // Detectar URL normal /d/ID/
          const norm = raw.match(/\/spreadsheets\/d\/([^/]+)/);
          if (!out.id && norm) { 
            out.type = 'normal'; 
            out.id = norm[1]; 
          }
          // Detectar gid=123
          const gidMatch = raw.match(/[?&]gid=(\d+)/);
          if (gidMatch) out.gid = gidMatch[1];
        } catch (e) {}
        if (!out.id) { out.id = raw.trim(); }
        return out;
      }

      function setupFilters() {
        var buttons = document.querySelectorAll(".filter-btn");
        buttons.forEach(function(btn) {
          btn.addEventListener("click", function() {
            buttons.forEach(function(b) { b.classList.remove("active"); });
            btn.classList.add("active");
            var filter = btn.getAttribute("data-filter");
            var rows = document.querySelectorAll("#portfolio-body-cartera tr");
            rows.forEach(function(row) {
              var sector = row.getAttribute("data-sector");
              var yieldVal = parseFloat(row.getAttribute("data-yield"));
              var show = false;
              switch(filter) {
                case "all":
                  show = true;
                  break;
                case "sector-financials":
                  show = sector.includes("financials");
                  break;
                case "sector-health-care":
                  show = sector.includes("health-care") || sector.includes("healthcare") || sector.includes("health care");
                  break;
                case "sector-consumer-staples":
                  show = sector.includes("consumer-staples") || sector.includes("consumer staples");
                  break;
                case "sector-utilities":
                  show = sector.includes("utilities");
                  break;
                case "sector-industrials":
                  show = sector.includes("industrials");
                  break;
                case "sector-real-estate":
                  show = sector.includes("real-estate") || sector.includes("real estate");
                  break;
                case "sector-technology":
                  show = sector.includes("technology");
                  break;
                case "sector-communication-services":
                  show = sector.includes("communication") || sector.includes("telecom");
                  break;
                case "sector-energy":
                  show = sector.includes("energy");
                  break;
                case "sector-materials":
                  show = sector.includes("materials");
                  break;
                case "sector-etf":
                  show = sector.includes("etf");
                  break;
                case "yield-alto":
                  show = yieldVal >= 4;
                  break;
                case "yield-medio":
                  show = yieldVal >= 2 && yieldVal < 4;
                  break;
                case "yield-bajo":
                  show = yieldVal < 2;
                  break;
                default:
                  show = true;
              }
              row.style.display = show ? "" : "none";
            });
            // Reindexar después de filtrar
            reindexRows();
          });
        });
      }

      function reindexRows() {
        const visibleRows = document.querySelectorAll("#portfolio-body-cartera tr:not([style*='display: none'])");
        visibleRows.forEach(function(row, index) {
          row.cells[0].textContent = index + 1;
        });
      }

      function setupSorting() {
        var sortableHeaders = document.querySelectorAll(".sortable");
        var currentSort = { field: null, direction: 'asc' };
        
        sortableHeaders.forEach(function(header) {
          header.addEventListener("click", function() {
            var sortField = header.getAttribute("data-sort");
            var direction = 'asc';
            if (currentSort.field === sortField) {
              direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
            }
            currentSort = { field: sortField, direction: direction };
            
            // Actualizar clases visuales
            sortableHeaders.forEach(function(h) {
              h.classList.remove('sort-asc', 'sort-desc');
            });
            header.classList.add(direction === 'asc' ? 'sort-asc' : 'sort-desc');
            
            sortTable(sortField, direction);
          });
        });
      }

      function sortTable(sortField, direction) {
        var tbody = document.getElementById("portfolio-body-cartera");
        var rows = Array.from(tbody.querySelectorAll("tr"));
        
        rows.sort(function(a, b) {
          var aValue, bValue;
          
          switch(sortField) {
            case 'index':
              aValue = parseInt(a.cells[0].textContent);
              bValue = parseInt(b.cells[0].textContent);
              break;
            case 'ticker':
              aValue = a.cells[1].textContent.toLowerCase();
              bValue = b.cells[1].textContent.toLowerCase();
              break;
            case 'empresa':
              aValue = a.cells[2].textContent.toLowerCase();
              bValue = b.cells[2].textContent.toLowerCase();
              break;
            case 'sector':
              aValue = a.cells[3].textContent.toLowerCase();
              bValue = b.cells[3].textContent.toLowerCase();
              break;
            case 'porcentaje':
              // Ordenar por valor en lugar de porcentaje
              aValue = parseFloat(a.getAttribute("data-valor"));
              bValue = parseFloat(b.getAttribute("data-valor"));
              break;
            case 'dividendo':
              aValue = parseFloat(a.getAttribute("data-dividendo"));
              bValue = parseFloat(b.getAttribute("data-dividendo"));
              break;
            case 'yield':
              aValue = parseFloat(a.getAttribute("data-yield"));
              bValue = parseFloat(b.getAttribute("data-yield"));
              break;
            default:
              return 0;
          }
          
          if (aValue === null) return 1;
          if (bValue === null) return -1;
          
          if (direction === 'asc') {
            return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;
          } else {
            return aValue < bValue ? 1 : aValue > bValue ? -1 : 0;
          }
        });
        
        rows.forEach(function(row) {
          tbody.appendChild(row);
        });
        
        // Reindexar después de ordenar
        reindexRows();
      }

      // Carga directa usando tu URL
      (function initAutoLoad() {
        try {
          // URL proporcionada
          const provided = 'https://docs.google.com/spreadsheets/d/109KK0_8lsuESPR8x4wXTlRQqkwCkfQotI5pzBETOwp0/edit?gid=0#gid=0';
          const parsed = parseSheetInput(provided);
          const isPublished = parsed.type === 'published';
          const sheetId = parsed.id;
          const gid = parsed.gid || '0';
          console.log('Autocarga activada. Tipo:', isPublished ? 'publicada' : 'normal', 'ID:', sheetId, 'GID:', gid);
          loadPortfolioData({ isPublished, sheetId, gid });
        } catch (e) {
          console.error('Fallo al inicializar la carga automática:', e);
          showError('Error de inicialización', e.message || String(e));
        }
      })();
    })();
  </script>
</body>
</html>

